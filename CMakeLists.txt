cmake_minimum_required(VERSION 3.4)

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

option(BUILD_COVERAGE "Build coverage" OFF)

set(
  HUNTER_CACHE_SERVERS
  "https://github.com/bmstu-iu8-cpp-sem-3/hunter-cache"
  CACHE STRING "Default cache server"
)

include("tools/gate/cmake/HunterGate.cmake")

HunterGate(
  URL "https://github.com/cpp-pm/hunter/archive/v0.23.218.tar.gz"
  SHA1 "9a3594a61227967fb92159339ba326701b287b19"
)

project(JSON_Parser)

string(APPEND CMAKE_CXX_FLAGS " -pedantic -Werror -Wall -Wextra")
string(APPEND CMAKE_CXX_FLAGS " -Wno-unused-command-line-argument")
string(APPEND CMAKE_CXX_FLAGS " -Wshadow -Wnon-virtual-dtor")

hunter_add_package(GTest)
find_package(GTest CONFIG REQUIRED)

add_library(
        ${PROJECT_NAME}
        STATIC
        ${CMAKE_CURRENT_SOURCE_DIR}/sources/json.cpp
)


add_executable(
        tests
        ${CMAKE_CURRENT_SOURCE_DIR}/tests/test.cpp
)
target_include_directories(
        ${PROJECT_NAME}
        PUBLIC
        ${CMAKE_CURRENT_SOURCE_DIR}/sources/include
)

target_include_directories(
        tests 
        PUBLIC
        ${CMAKE_CURRENT_SOURCE_DIR}/include
)

target_link_libraries(tests GTest::main ${PROJECT_NAME})

#find_library(
#  GTEST_LOCAL_LIB_MAIN
#  NAMES gtest_main
#  PATHS ${PROJECT_NAME}/lib64/
#)
#target_link_libraries(
#  tests
#  ${CMAKE_THREAD_LIBS_INIT}
#  ${GTEST_LOCAL_LIB}
#  ${GTEST_LOCAL_LIB_MAIN}
#  ${PROJECT_NAME}
#)

enable_testing()
add_test(NAME unit_tests COMMAND tests) 

if (BUILD_MAIN)
  set(MAIN_NAME ${PROJECT_NAME}Main)
  add_executable(
    ${MAIN_NAME}
    ${CMAKE_CURRENT_SOURCE_DIR}/sources/main.cpp
  )

  target_include_directories(
    ${MAIN_NAME}
    PUBLIC ${CMAKE_CURRENT_SOURCE_DIR}/include
  )
  target_link_libraries(${MAIN_NAME} ${PROJECT_NAME})
endif ()

if(BUILD_COVERAGE)
  set(ENABLE_COVERAGE ON CACHE BOOL "Enable coverage build." FORCE)
  list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/cmake")
  find_package(codecov)
  add_coverage(${PROJECT_NAME})
  add_coverage(tests)
  list(APPEND LCOV_REMOVE_PATTERNS "'${PROJECT_SOURCE_DIR}/tests/*'")
  coverage_evaluate()
endif()
